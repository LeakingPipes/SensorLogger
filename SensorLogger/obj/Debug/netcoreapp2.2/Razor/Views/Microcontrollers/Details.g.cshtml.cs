#pragma checksum "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f4083822c359feedbc7cd9c00769d2847e0ef7c6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Microcontrollers_Details), @"mvc.1.0.view", @"/Views/Microcontrollers/Details.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Microcontrollers/Details.cshtml", typeof(AspNetCore.Views_Microcontrollers_Details))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\_ViewImports.cshtml"
using SensorLogger;

#line default
#line hidden
#line 2 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\_ViewImports.cshtml"
using SensorLogger.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f4083822c359feedbc7cd9c00769d2847e0ef7c6", @"/Views/Microcontrollers/Details.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8dccc9acb23acb1f7471cf183912036672c6059", @"/Views/_ViewImports.cshtml")]
    public class Views_Microcontrollers_Details : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<SensorLogger.Models.Microcontroller>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Edit", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(44, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
  
    ViewData["Title"] = "Details";

#line default
#line hidden
            BeginContext(89, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(3158, 1012, true);
            WriteLiteral(@"
<script type=""text/javascript"" src=""https://www.gstatic.com/charts/loader.js""></script>
<script type=""text/javascript"">
    google.charts.load('current', { 'packages': ['corechart'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
            var data = google.visualization.arrayToDataTable([


                ['Time', 'C', 'Procent'],


                ['17-05-2020 09:56:46', 24],


                ['17-05-2020 09:45:46', 21, 50],


                ['17-05-2020 09:36:46', 24],


                ['17-05-2020 09:51:46', 31],


                ['17-05-2020 09:22:46', 27],


                ['17-05-2020 09:15:46', 19]
        ]);

            var options = {
            title: '',
            curveType: 'function',
            legend: { position: 'bottom' }
        };

        var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

        chart.draw(data, options);
    }
</script>

<div>
    ");
            EndContext();
            BeginContext(4171, 9, false);
#line 152 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
Write(getdata());

#line default
#line hidden
            EndContext();
            BeginContext(4180, 67, true);
            WriteLiteral("\r\n    <dl class=\"row\">\r\n        <dt class=\"col-sm-2\">\r\n            ");
            EndContext();
            BeginContext(4248, 55, false);
#line 155 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
       Write(Html.DisplayNameFor(model => model.MicrocontrollerName));

#line default
#line hidden
            EndContext();
            BeginContext(4303, 61, true);
            WriteLiteral("\r\n        </dt>\r\n        <dd class=\"col-sm-10\">\r\n            ");
            EndContext();
            BeginContext(4365, 51, false);
#line 158 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
       Write(Html.DisplayFor(model => model.MicrocontrollerName));

#line default
#line hidden
            EndContext();
            BeginContext(4416, 178, true);
            WriteLiteral("\r\n        </dd>\r\n        <dt class=\"col-sm-2\">\r\n            API URL\r\n        </dt>\r\n        <dd class=\"col-sm-10\">\r\n            <p>https://localhost:44396/api/microcontroller?id=");
            EndContext();
            BeginContext(4595, 49, false);
#line 164 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                                                         Write(Html.DisplayFor(model => model.MicrocontrollerID));

#line default
#line hidden
            EndContext();
            BeginContext(4644, 64, true);
            WriteLiteral("</p>\r\n        </dd>\r\n        <dt class=\"col-sm-2\">\r\n            ");
            EndContext();
            BeginContext(4709, 44, false);
#line 167 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
       Write(Html.DisplayNameFor(model => model.Readings));

#line default
#line hidden
            EndContext();
            BeginContext(4753, 288, true);
            WriteLiteral(@"
        </dt>

        <div id=""curve_chart"" style=""width: 800px; height: 300px""></div>

        <dd class=""col-sm-10"">
            <table class=""table"">
                <tr>
                    <th>Date and time</th>
                    <th>Values</th>
                </tr>
");
            EndContext();
#line 178 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                 foreach (var _reading in Model.Readings)
    {

#line default
#line hidden
            BeginContext(5107, 84, true);
            WriteLiteral("                    <tr>\r\n                        <td>\r\n                            ");
            EndContext();
            BeginContext(5192, 44, false);
#line 182 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                       Write(Html.DisplayFor(model => _reading.Date_time));

#line default
#line hidden
            EndContext();
            BeginContext(5236, 63, true);
            WriteLiteral("\r\n                        </td>\r\n                        <td>\r\n");
            EndContext();
#line 185 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                             foreach (var _readingvalue in _reading.ReadingValues)
                            {
            

#line default
#line hidden
            BeginContext(5427, 45, false);
#line 187 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
       Write(Html.DisplayFor(model => _readingvalue.Value));

#line default
#line hidden
            EndContext();
            BeginContext(5492, 1, true);
            WriteLiteral(" ");
            EndContext();
            BeginContext(5515, 49, false);
#line 189 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
       Write(Html.DisplayFor(model => _readingvalue.ValueType));

#line default
#line hidden
            EndContext();
            BeginContext(5566, 20, true);
            WriteLiteral("            <br />\r\n");
            EndContext();
#line 191 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                            }

#line default
#line hidden
            BeginContext(5617, 58, true);
            WriteLiteral("                        </td>\r\n                    </tr>\r\n");
            EndContext();
#line 194 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                }

#line default
#line hidden
            BeginContext(5694, 67, true);
            WriteLiteral("            </table>\r\n        </dd>\r\n    </dl>\r\n</div>\r\n<div>\r\n    ");
            EndContext();
            BeginContext(5761, 69, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f4083822c359feedbc7cd9c00769d2847e0ef7c610468", async() => {
                BeginContext(5822, 4, true);
                WriteLiteral("Edit");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            if (__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues == null)
            {
                throw new InvalidOperationException(InvalidTagHelperIndexerAssignment("asp-route-id", "Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper", "RouteValues"));
            }
            BeginWriteTagHelperAttribute();
#line 200 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
                           WriteLiteral(Model.MicrocontrollerID);

#line default
#line hidden
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"] = __tagHelperStringValueBuffer;
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-route-id", __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.RouteValues["id"], global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5830, 8, true);
            WriteLiteral(" |\r\n    ");
            EndContext();
            BeginContext(5838, 38, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f4083822c359feedbc7cd9c00769d2847e0ef7c612821", async() => {
                BeginContext(5860, 12, true);
                WriteLiteral("Back to List");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5876, 8, true);
            WriteLiteral("\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
#line 7 "C:\Users\Mads\Documents\GitHub\SensorLogger\SensorLogger\Views\Microcontrollers\Details.cshtml"
            

    string getdata()
    {
        string header = "['Time'";
        string values = "['";

        string output = "['Time'";
        string outputreadingvalue = "['";
        List<string> valueType = new List<string>();

        List<ChartItemHolderModel> ChartItemLists = new List<ChartItemHolderModel>();

        foreach (Reading reading in Model.Readings)
        {
            foreach (ReadingValue readingValue in reading.ReadingValues)
            {
                int? _index = null;

                for (int i = 0; i < ChartItemLists.Count;)
                {
                    if (ChartItemLists[i].ValueType == readingValue.ValueType)
                    {
                        _index = i;
                    }
                    i++;
                }

                if(_index == null)
                {
                    ChartItemModel chartItem = new ChartItemModel();
                    chartItem.Date_time = reading.Date_time;
                    chartItem.Value = readingValue.Value;
                    chartItem.ValueType = readingValue.ValueType;


                    ChartItemHolderModel _ChartItemHolder = new ChartItemHolderModel();
                    _ChartItemHolder.ValueType = chartItem.ValueType;
                    _ChartItemHolder.ChartItems = new List<ChartItemModel>();
                    _ChartItemHolder.ChartItems.Add(chartItem);
                    ChartItemLists.Add(_ChartItemHolder);
                }
                else
                {
                    ChartItemModel chartItem = new ChartItemModel
                    { Date_time = reading.Date_time, Value = readingValue.Value, ValueType = readingValue.ValueType };
                    ChartItemLists[_index ?? default(int)].ValueType = readingValue.ValueType;
                    ChartItemLists[_index ?? default(int)].ChartItems.Add(chartItem);
                }

                valueType.Add(readingValue.ValueType);

                output = output + ", '" + readingValue.ValueType + "'";

            }
        }

        output = output + "],";


        foreach (ChartItemHolderModel ChartItemList in ChartItemLists)
        {





            header = header + ", '" + ChartItemList.ValueType + "'";



            //outputreadingvalue = outputreadingvalue + reading.Date_time + "'";

            // foreach(ReadingValue readingValue in reading.ReadingValues)
            // {
            //    outputreadingvalue = outputreadingvalue + ", " + readingValue.Value;

            //}
            outputreadingvalue = outputreadingvalue + "],";
        }
        header = header + "],";

        foreach (ChartItemHolderModel ChartItemList in ChartItemLists)
        {
            //values = values + ", '" + ChartItemList. + "'";


        }




        outputreadingvalue = outputreadingvalue.Remove(outputreadingvalue.Length - 1);


        output = output + outputreadingvalue;

        return header;
    }

            

#line default
#line hidden
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SensorLogger.Models.Microcontroller> Html { get; private set; }
    }
}
#pragma warning restore 1591
