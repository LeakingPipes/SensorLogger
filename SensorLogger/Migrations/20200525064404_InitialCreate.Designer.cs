// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SensorLogger.Data;

namespace SensorLogger.Migrations
{
    [DbContext(typeof(SensorLoggerContext))]
    [Migration("20200525064404_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SensorLogger.Models.Board", b =>
                {
                    b.Property<int>("BoardID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoardName");

                    b.HasKey("BoardID");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("SensorLogger.Models.Component", b =>
                {
                    b.Property<int>("ComponentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComponentName");

                    b.Property<int>("NumberOfPins");

                    b.HasKey("ComponentID");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("SensorLogger.Models.Microcontroller", b =>
                {
                    b.Property<int>("MicrocontrollerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APIauthKey");

                    b.Property<string>("MicrocontrollerName");

                    b.Property<int>("UserID");

                    b.Property<bool>("isPrivate");

                    b.HasKey("MicrocontrollerID");

                    b.HasIndex("UserID");

                    b.ToTable("Microcontroller");
                });

            modelBuilder.Entity("SensorLogger.Models.Reading", b =>
                {
                    b.Property<int>("ReadingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date_time");

                    b.Property<int>("MicrocontrollerID");

                    b.HasKey("ReadingID");

                    b.HasIndex("MicrocontrollerID");

                    b.ToTable("Reading");
                });

            modelBuilder.Entity("SensorLogger.Models.ReadingValue", b =>
                {
                    b.Property<int>("ReadingValueID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReadingID");

                    b.Property<float>("Value");

                    b.Property<string>("ValueType");

                    b.HasKey("ReadingValueID");

                    b.HasIndex("ReadingID");

                    b.ToTable("ReadingValue");
                });

            modelBuilder.Entity("SensorLogger.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("Role");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SensorLogger.Models.Microcontroller", b =>
                {
                    b.HasOne("SensorLogger.Models.User", "User")
                        .WithMany("Microcontrollers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SensorLogger.Models.Reading", b =>
                {
                    b.HasOne("SensorLogger.Models.Microcontroller", "Microcontroller")
                        .WithMany("Readings")
                        .HasForeignKey("MicrocontrollerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SensorLogger.Models.ReadingValue", b =>
                {
                    b.HasOne("SensorLogger.Models.Reading", "Readings")
                        .WithMany("ReadingValues")
                        .HasForeignKey("ReadingID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
